#!/usr/bin/env python3
"""Generate a single dilemma using the generation system.

This script demonstrates the complete generation pipeline:
1. Load seeds from data/seeds/
2. Sample random components
3. Use LLM to synthesize dilemma
4. Save to database

Usage:
    uv run python scripts/generate_dilemma.py
    uv run python scripts/generate_dilemma.py --difficulty 8
    uv run python scripts/generate_dilemma.py --save
"""

import asyncio
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

import argparse
import json

from dilemmas.db.database import get_database
from dilemmas.models.db import DilemmaDB
from dilemmas.services.generator import DilemmaGenerator


async def main():
    """Generate and display a dilemma."""
    parser = argparse.ArgumentParser(description="Generate a single ethical dilemma")
    parser.add_argument(
        "--difficulty",
        type=int,
        default=5,
        choices=range(1, 11),
        help="Target difficulty (1-10, default: 5)",
    )
    parser.add_argument(
        "--save",
        action="store_true",
        help="Save to database",
    )
    parser.add_argument(
        "--prompt-version",
        type=str,
        default="v2_structured",
        choices=["v1_basic", "v2_structured", "v3_creative"],
        help="Prompt version to use",
    )

    args = parser.parse_args()

    print(f"ðŸŽ² Generating dilemma (difficulty {args.difficulty}/10)...\n")

    # Create generator
    generator = DilemmaGenerator(prompt_version=args.prompt_version)

    # Generate
    dilemma = await generator.generate_random(difficulty=args.difficulty)

    # Display
    print("=" * 80)
    print(f"TITLE: {dilemma.title}")
    print("=" * 80)
    print(f"\nID: {dilemma.id}")
    print(f"Difficulty (intended): {dilemma.difficulty_intended}/10")
    print(f"Tags: {', '.join(dilemma.tags)}")
    print(f"\n{'-' * 80}")
    print("SITUATION:")
    print(f"{'-' * 80}")
    print(dilemma.situation_template)

    print(f"\n{'-' * 80}")
    print("QUESTION:")
    print(f"{'-' * 80}")
    print(dilemma.question)

    print(f"\n{'-' * 80}")
    print("CHOICES:")
    print(f"{'-' * 80}")
    for i, choice in enumerate(dilemma.choices, 1):
        print(f"\n{i}. {choice.label}")
        print(f"   {choice.description}")
        if choice.tool_name:
            print(f"   Tool: {choice.tool_name}")

    if dilemma.variables:
        print(f"\n{'-' * 80}")
        print("VARIABLES (for bias testing):")
        print(f"{'-' * 80}")
        for var, options in dilemma.variables.items():
            print(f"  {var}: {options}")

    if dilemma.modifiers:
        print(f"\n{'-' * 80}")
        print("MODIFIERS:")
        print(f"{'-' * 80}")
        for mod in dilemma.modifiers:
            print(f"  - {mod}")

    print(f"\n{'-' * 80}")
    print("GENERATION METADATA:")
    print(f"{'-' * 80}")
    print(f"Generated by: {dilemma.generator_model}")
    print(f"Prompt version: {dilemma.generator_prompt_version}")
    print(f"Created by: {dilemma.created_by}")
    if dilemma.seed_components:
        print(f"\nSeed components:")
        print(json.dumps(dilemma.seed_components, indent=2))

    # Save if requested
    if args.save:
        print(f"\n{'=' * 80}")
        print("ðŸ’¾ Saving to database...")
        db = get_database()
        async for session in db.get_session():
            db_dilemma = DilemmaDB.from_domain(dilemma)
            session.add(db_dilemma)
            await session.commit()
            print(f"âœ“ Saved dilemma '{dilemma.id}' to database")

        await db.close()

    print(f"\n{'=' * 80}\n")
    return 0


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
